import os
from dotenv import load_dotenv
import telebot
import requests
from googletrans import Translator
from googletrans import LANGCODES
import base64

load_dotenv()
#—Ä–∞–±–æ—Ç–∞ —Å –∞–ø–∏
Api = os.getenv("ApiDeepSeekDifferentServer")
token = os.getenv("token")

headers = {
'Authorization': 'Bearer ' + Api,
'content-type': 'application/json'
}


data = {
        "model": "deepseek-ai/DeepSeek-R1",
        "messages": [{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º.–ú—ã—Å–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."}, {"role": "user", "content": ''}],
        "temperature": 0.7
        }
bot = telebot.TeleBot(token)
translator = Translator()


#–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    JokeButton = telebot.types.KeyboardButton("ü§£–†–∞–Ω–¥–æ–º —à—É—Ç–∫–∞ –ø—Ä–æ –ß–∞–∫–∞ –ù–æ—Ä–∏—Å–∞")
    QuestionAndAnswerButton = telebot.types.KeyboardButton("‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å(Q&A)")
    #AIvision = telebot.types.KeyboardButton("üñº–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ")
    markup.add(JokeButton, QuestionAndAnswerButton, AIvision)
    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –°—ç—Ä", reply_markup=markup)


back = telebot.types.KeyboardButton("‚ùå–ù–∞–∑–∞–¥")


#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π —à—É—Ç–∫–∏ –ø—Ä–æ –ß–∞–∫–∞ –ù–æ—Ä—Ä–∏—Å–∞
@bot.message_handler(func=lambda x: x.text == "ü§£–†–∞–Ω–¥–æ–º —à—É—Ç–∫–∞ –ø—Ä–æ –ß–∞–∫–∞ –ù–æ—Ä–∏—Å–∞")
def get_joke(message):
    response = requests.get('https://api.chucknorris.io/jokes/random').json()
    translate_response = translator.translate(response['value'], src='en', dest="ru").text
    bot.send_message(message.chat.id, translate_response)
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(back)
    bot.send_message(message.chat.id, "–°–º–µ—à–Ω–æ?...–°–æ—Å–∞–ª?", reply_markup=markup)


#—Ñ—É–Ω–∫–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞ —Ç–≥
def split_send(ans: str, user_input, parse_mode: str = None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ `ans` —á–∞—Å—Ç—è–º–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.

    :param ans: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    :param user_input: –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —á–∞—Ç–∞ (–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å `user_input.chat.id`)
    :param parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Markdown')
    """
    chunk_size = 4096
    for i in range(0, len(ans), chunk_size):
        chunk = ans[i:i + chunk_size]
        bot.send_message(
            chat_id=user_input.chat.id,
            text=chunk,
            parse_mode=parse_mode
        )


flag = True


#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–¥–∞ –≤ –º–µ–Ω—é (Q&A)
@bot.message_handler(func=lambda x: x.text == "‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å(Q&A)")
def give_question(message):
    global flag
    flag = True
    bot.send_message(message.chat.id, "–ü–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
    #–≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Å–ª–µ–¥—É–µ—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    @bot.message_handler(func=lambda message: flag is True, content_types=['text'])
    def get_answer(user_input):
        try:
            data['messages'][1]['content'] = user_input.text
            response = requests.post('https://api.intelligence.io.solutions/api/v1/chat/completions', headers=headers, json=data)
            if response:
                j_answer = response.json()
                answer = j_answer["choices"][0]["message"]["content"]
                thinking = answer.split("<think>")[1].split(r"</think>")[0]
                answer_for_user = answer.split(r"</think>")[1]
                limit = len(answer) + len(thinking) + 3
                count = 1
                print(answer)
                if 4096 < limit:
                    count = limit // 4096 + (1 if limit % 4096 != 0 else 0)
                full_answer = f"_{thinking}_ {answer_for_user}"
                try:
                    #bot.send_message(user_input.chat.id, f"_{thinking}_ {answer_for_user}", parse_mode='Markdown')
                    split_send(full_answer, user_input, "Markdown")
                except:
                    split_send(full_answer, user_input)
                    #bot.send_message(user_input.chat.id, f"{thinking} {answer_for_user}")

            else:
                print(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é, {response.status_code}")
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é, {response.status_code}")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API {str(e)}")
        finally:
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(back)
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(func=lambda x: x.text == "‚ùå–ù–∞–∑–∞–¥")
def Back(message):
    global flag
    flag = False
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    JokeButton = telebot.types.KeyboardButton("ü§£–†–∞–Ω–¥–æ–º —à—É—Ç–∫–∞ –ø—Ä–æ –ß–∞–∫–∞ –ù–æ—Ä–∏—Å–∞")
    QuestionAndAnswerButton = telebot.types.KeyboardButton("‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å(Q&A)")
    markup.add(JokeButton, QuestionAndAnswerButton)
    bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=markup)


#@bot.message_handler(func=lambda x: x.text == "üñº–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ")
#def Vision(message):
#    global flag
#    @bot.message_handler(func=lambda m: flag is True)
#    def description(photo):


bot.polling(none_stop=True)