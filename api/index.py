import os
import time
from flask import Flask, Response, request
from dotenv import load_dotenv
import telebot
import requests
from googletrans import Translator

load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('token')

if not TOKEN:
    raise ValueError("Bot token is not set in environment variables!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ API
Api = os.getenv("ApiDeepSeekDifferentServer")
translator = Translator()

if not Api:
    raise ValueError("API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")


# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)


@app.route("/")
def index():
    return "Hello World!"

@app.route("/setWebhook")
def set_webhook():
    try:
        bot.remove_webhook()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        vercel_url = os.getenv("VERCEL_URL")
        if not vercel_url:
            return "<h1>Error: VERCEL_URL not set</h1>", 500

        # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            bot.remove_webhook()
            time.sleep(1)
            webhook_url = f"{vercel_url}/webhook"

            # –í–∞–∂–Ω–æ: set_webhook –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å 500 –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö
            bot.set_webhook(
                url=webhook_url,
                timeout=10  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            )

            return f"<h1>Bot is running. Webhook: {webhook_url}</h1>"

        except Exception as webhook_error:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å health-check
            return f"<h1>Bot running (webhook error: {str(webhook_error)})</h1>", 200

    except Exception as e:
        return f"<h1>Critical error: {str(e)}</h1>", 500

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == 'POST':
        json_data = request.stream.read().decode('utf-8')
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
    return 'ok', 200




# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
flag = True
back = telebot.types.KeyboardButton("‚ùå–ù–∞–∑–∞–¥")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "ü§£–†–∞–Ω–¥–æ–º —à—É—Ç–∫–∞ –ø—Ä–æ –ß–∞–∫–∞ –ù–æ—Ä–∏—Å–∞",
        "‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å(Q&A)",
        #"üñº–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ"
    ]
    markup.add(*[telebot.types.KeyboardButton(btn) for btn in buttons])
    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –°—ç—Ä", reply_markup=markup)


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@bot.message_handler(func=lambda x: x.text == "ü§£–†–∞–Ω–¥–æ–º —à—É—Ç–∫–∞ –ø—Ä–æ –ß–∞–∫–∞ –ù–æ—Ä–∏—Å–∞")
def get_joke(message):
    response = requests.get('https://api.chucknorris.io/jokes/random').json()
    translated = translator.translate(response['value'], src='en', dest="ru").text
    bot.send_message(message.chat.id, translated)

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(back)
    bot.send_message(message.chat.id, "–°–º–µ—à–Ω–æ?...–°–æ—Å–∞–ª?", reply_markup=markup)


def split_send(text: str, chat_id: int, parse_mode=None):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç—è–º–∏"""
    for i in range(0, len(text), 4096):
        bot.send_message(chat_id, text[i:i + 4096], parse_mode=parse_mode)


@bot.message_handler(func=lambda x: x.text == "‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å(Q&A)")
def give_question(message):
    global flag
    flag = True
    bot.send_message(message.chat.id, "–ü–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")


@bot.message_handler(func=lambda message: flag, content_types=['text'])
def get_answer(message):

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
    headers = {
        'Authorization': f'Bearer {Api}',
        'content-type': 'application/json'
    }

    data = {
        "model": "deepseek-ai/DeepSeek-R1",
        "messages": [
            {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º.–ú—ã—Å–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."},
            {"role": "user", "content": ''}
        ],
        "temperature": 0.7
    }

    try:
        data['messages'][1]['content'] = message.text
        try:
            response = requests.post(
                'https://api.intelligence.io.solutions/api/v1/chat/completions',
                headers=headers,
                json=data,
                timeout=10  # –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Ç–∞–π–º–∞—É—Ç
            )
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 4XX/5XX –æ—à–∏–±–∫–∏
        except requests.exceptions.RequestException as e:
            print(f"API Request Failed: {str(e)}")
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        if response.ok:
            answer = response.json()["choices"][0]["message"]["content"]
            parts = answer.split("<think>")[1].split("</think>")
            thinking, answer_text = parts[0], parts[1]
            split_send(f"_{thinking}_ {answer_text}", message.chat.id, "Markdown")
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ API: {response.status_code}")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(back)
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)


@bot.message_handler(func=lambda x: x.text == "‚ùå–ù–∞–∑–∞–¥")
def back_handler(message):
    global flag
    flag = False
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "ü§£–†–∞–Ω–¥–æ–º —à—É—Ç–∫–∞ –ø—Ä–æ –ß–∞–∫–∞ –ù–æ—Ä–∏—Å–∞",
        "‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å(Q&A)"
    ]
    markup.add(*[telebot.types.KeyboardButton(btn) for btn in buttons])
    bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=markup)



